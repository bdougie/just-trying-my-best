{"ast":null,"code":"import React from 'react';\nimport { jsx, useThemeUI, merge, Context } from '@theme-ui/core';\nimport { Global, ThemeContext } from '@emotion/core';\nimport { css, get } from '@theme-ui/css';\n\nvar toVarName = function toVarName(key) {\n  return \"--theme-ui-\" + key;\n};\n\nvar toVarValue = function toVarValue(key, value) {\n  return \"var(\" + toVarName(key) + \", \" + value + \")\";\n};\n\nvar join = function join() {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  return args.filter(Boolean).join('-');\n};\n\nvar numberScales = {\n  fontWeights: true,\n  lineHeights: true\n};\nvar reservedKeys = {\n  useCustomProperties: true,\n  initialColorModeName: true,\n  initialColorMode: true\n};\n\nvar toPixel = function toPixel(key, value) {\n  if (typeof value !== 'number') {\n    return value;\n  }\n\n  if (numberScales[key]) {\n    return value;\n  }\n\n  return value + 'px';\n}; // convert theme values to custom properties\n\n\nvar toCustomProperties = function toCustomProperties(obj, parent, themeKey) {\n  var next = Array.isArray(obj) ? [] : {};\n\n  for (var key in obj) {\n    var value = obj[key];\n    var name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name, key);\n      continue;\n    }\n\n    if (reservedKeys[key]) {\n      next[key] = value;\n      continue;\n    }\n\n    var val = toPixel(themeKey || key, value);\n    next[key] = toVarValue(name, val);\n  }\n\n  return next;\n};\n\nvar objectToVars = function objectToVars(parent, obj) {\n  var vars = {};\n\n  for (var key in obj) {\n    if (key === 'modes') {\n      continue;\n    }\n\n    var name = join(parent, key);\n    var value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = Object.assign({}, vars, objectToVars(name, value));\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n}; // create body styles for color modes\n\n\nvar createColorStyles = function createColorStyles(theme) {\n  if (theme === void 0) theme = {};\n\n  if (!theme.colors || theme.useBodyStyles === false) {\n    return {};\n  }\n\n  if (theme.useCustomProperties === false || !theme.colors.modes) {\n    return css({\n      body: {\n        color: 'text',\n        bg: 'background'\n      }\n    })(theme);\n  }\n\n  var colors = theme.rawColors || theme.colors;\n  var modes = colors.modes;\n  var styles = objectToVars('colors', colors);\n  Object.keys(modes).forEach(function (mode) {\n    var key = \"&.theme-ui-\" + mode;\n    styles[key] = objectToVars('colors', modes[mode]);\n  });\n  return css({\n    body: Object.assign({}, styles, {\n      color: 'text',\n      bg: 'background'\n    })\n  })(theme);\n};\n\nvar STORAGE_KEY = 'theme-ui-color-mode';\nvar storage = {\n  get: function get(init) {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY) || init;\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  },\n  set: function set(value) {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  }\n};\n\nvar getMediaQuery = function getMediaQuery() {\n  var darkQuery = '(prefers-color-scheme: dark)';\n  var lightQuery = '(prefers-color-scheme: light)';\n  var darkMQL = window.matchMedia ? window.matchMedia(darkQuery) : {};\n  var lightMQL = window.matchMedia ? window.matchMedia(lightQuery) : {};\n  var dark = darkMQL.media === darkQuery && darkMQL.matches;\n\n  if (dark) {\n    return 'dark';\n  }\n\n  var light = lightMQL.media === lightQuery && lightMQL.matches;\n\n  if (light) {\n    return 'light';\n  }\n\n  return 'default';\n};\n\nvar useColorModeState = function useColorModeState(theme) {\n  if (theme === void 0) theme = {};\n  var ref = React.useState(theme.initialColorModeName || 'default');\n  var mode = ref[0];\n  var setMode = ref[1]; // initialize state\n\n  React.useEffect(function () {\n    var stored = storage.get();\n    document.body.classList.remove('theme-ui-' + stored);\n\n    if (!stored && theme.useColorSchemeMediaQuery) {\n      var query = getMediaQuery();\n      setMode(query);\n      return;\n    }\n\n    if (!stored || stored === mode) {\n      return;\n    }\n\n    setMode(stored);\n  }, []);\n  React.useEffect(function () {\n    if (!mode) {\n      return;\n    }\n\n    storage.set(mode);\n  }, [mode]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (theme.colors && theme.colors.modes && Object.keys(theme.colors.modes).indexOf(theme.initialColorModeName) > -1) {\n      console.warn('The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  return [mode, setMode];\n};\n\nvar useColorMode = function useColorMode() {\n  var ref = useThemeUI();\n  var colorMode = ref.colorMode;\n  var setColorMode = ref.setColorMode;\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(\"[useColorMode] requires the ColorModeProvider component\");\n  }\n\n  return [colorMode, setColorMode];\n};\n\nvar applyColorMode = function applyColorMode(theme, mode) {\n  if (!mode) {\n    return theme;\n  }\n\n  var modes = get(theme, 'colors.modes', {});\n  return merge.all({}, theme, {\n    colors: get(modes, mode, {})\n  });\n};\n\nvar BodyStyles = function BodyStyles() {\n  return jsx(Global, {\n    styles: function styles(theme) {\n      return createColorStyles(theme);\n    }\n  });\n};\n\nvar ColorModeProvider = function ColorModeProvider(ref) {\n  var children = ref.children;\n  var outer = useThemeUI();\n  var ref$1 = useColorModeState(outer.theme);\n  var colorMode = ref$1[0];\n  var setColorMode = ref$1[1];\n  var theme = applyColorMode(outer.theme || {}, colorMode);\n  var emotionTheme = Object.assign({}, theme);\n\n  if (theme.useCustomProperties !== false) {\n    emotionTheme.colors = toCustomProperties(emotionTheme.colors, 'colors');\n  }\n\n  var context = Object.assign({}, outer, {\n    theme: theme,\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  });\n  return jsx(ThemeContext.Provider, {\n    value: emotionTheme\n  }, jsx(Context.Provider, {\n    value: context\n  }, jsx(BodyStyles, {\n    key: 'color-mode'\n  }), children));\n};\n\nvar noflash = \"(function() { try {\\n  var mode = localStorage.getItem('theme-ui-color-mode');\\n  if (!mode) return\\n  document.body.classList.add('theme-ui-' + mode);\\n} catch (e) {} })();\";\n\nvar InitializeColorMode = function InitializeColorMode() {\n  return jsx('script', {\n    key: 'theme-ui-no-flash',\n    dangerouslySetInnerHTML: {\n      __html: noflash\n    }\n  });\n};\n\nexport { useColorMode, ColorModeProvider, InitializeColorMode };","map":{"version":3,"sources":["../src/custom-properties.js","../src/index.js"],"names":["const","toVarName","key","toVarValue","value","join","args","numberScales","fontWeights","lineHeights","reservedKeys","useCustomProperties","initialColorModeName","initialColorMode","toPixel","toCustomProperties","next","Array","let","obj","name","val","themeKey","objectToVars","vars","createColorStyles","theme","body","color","bg","colors","modes","styles","Object","mode","STORAGE_KEY","storage","get","init","window","console","set","getMediaQuery","darkQuery","lightQuery","darkMQL","lightMQL","dark","light","useColorModeState","setMode","React","stored","document","query","process","useColorMode","colorMode","setColorMode","useThemeUI","applyColorMode","BodyStyles","jsx","ColorModeProvider","outer","emotionTheme","context","EmotionContext","Context","noflash","InitializeColorMode","dangerouslySetInnerHTML","__html"],"mappings":"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","sourcesContent":["import { css } from '@theme-ui/css'\n\nconst toVarName = key => `--theme-ui-${key}`\nconst toVarValue = (key, value) => `var(${toVarName(key)}, ${value})`\n\nconst join = (...args) => args.filter(Boolean).join('-')\n\nconst numberScales = {\n  fontWeights: true,\n  lineHeights: true,\n}\nconst reservedKeys = {\n  useCustomProperties: true,\n  initialColorModeName: true,\n  initialColorMode: true,\n}\n\nconst toPixel = (key, value) => {\n  if (typeof value !== 'number') return value\n  if (numberScales[key]) return value\n  return value + 'px'\n}\n\n// convert theme values to custom properties\nexport const toCustomProperties = (obj, parent, themeKey) => {\n  const next = Array.isArray(obj) ? [] : {}\n\n  for (let key in obj) {\n    const value = obj[key]\n    const name = join(parent, key)\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name, key)\n      continue\n    }\n    if (reservedKeys[key]) {\n      next[key] = value\n      continue\n    }\n    const val = toPixel(themeKey || key, value)\n    next[key] = toVarValue(name, val)\n  }\n\n  return next\n}\n\nexport const objectToVars = (parent, obj) => {\n  let vars = {}\n  for (let key in obj) {\n    if (key === 'modes') continue\n    const name = join(parent, key)\n    const value = obj[key]\n    if (value && typeof value === 'object') {\n      vars = {\n        ...vars,\n        ...objectToVars(name, value),\n      }\n    } else {\n      vars[toVarName(name)] = value\n    }\n  }\n  return vars\n}\n\n// create body styles for color modes\nexport const createColorStyles = (theme = {}) => {\n  if (!theme.colors || theme.useBodyStyles === false) return {}\n  if (theme.useCustomProperties === false || !theme.colors.modes) {\n    return css({\n      body: {\n        color: 'text',\n        bg: 'background',\n      },\n    })(theme)\n  }\n  const colors = theme.rawColors || theme.colors\n  const { modes } = colors\n  const styles = objectToVars('colors', colors)\n\n  Object.keys(modes).forEach(mode => {\n    const key = `&.theme-ui-${mode}`\n    styles[key] = objectToVars('colors', modes[mode])\n  })\n\n  return css({\n    body: {\n      ...styles,\n      color: 'text',\n      bg: 'background',\n    }\n  })(theme)\n}\n","import React from 'react'\nimport { jsx, useThemeUI, merge, Context } from '@theme-ui/core'\nimport { get } from '@theme-ui/css'\nimport { Global, ThemeContext as EmotionContext } from '@emotion/core'\nimport { toCustomProperties, createColorStyles } from './custom-properties'\n\nconst STORAGE_KEY = 'theme-ui-color-mode'\n\nconst storage = {\n  get: init => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY) || init\n    } catch (e) {\n      console.warn(\n        'localStorage is disabled and color mode might not work as expected.',\n        'Please check your Site Settings.',\n        e\n      )\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value)\n    } catch (e) {\n      console.warn(\n        'localStorage is disabled and color mode might not work as expected.',\n        'Please check your Site Settings.',\n        e\n      )\n    }\n  },\n}\n\nconst getMediaQuery = () => {\n  const darkQuery = '(prefers-color-scheme: dark)'\n  const lightQuery = '(prefers-color-scheme: light)'\n  const darkMQL = window.matchMedia ? window.matchMedia(darkQuery) : {}\n  const lightMQL = window.matchMedia ? window.matchMedia(lightQuery) : {}\n  const dark = darkMQL.media === darkQuery && darkMQL.matches\n  if (dark) return 'dark'\n  const light = lightMQL.media === lightQuery && lightMQL.matches\n  if (light) return 'light'\n  return 'default'\n}\n\nconst useColorModeState = (theme = {}) => {\n  const [mode, setMode] = React.useState(\n    theme.initialColorModeName || 'default'\n  )\n\n  // initialize state\n  React.useEffect(() => {\n    const stored = storage.get()\n    document.body.classList.remove('theme-ui-' + stored)\n    if (!stored && theme.useColorSchemeMediaQuery) {\n      const query = getMediaQuery()\n      setMode(query)\n      return\n    }\n    if (!stored || stored === mode) return\n    setMode(stored)\n  }, [])\n\n  React.useEffect(() => {\n    if (!mode) return\n    storage.set(mode)\n  }, [mode])\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (\n      theme.colors &&\n      theme.colors.modes &&\n      Object.keys(theme.colors.modes).indexOf(theme.initialColorModeName) > -1\n    ) {\n      console.warn(\n        'The `initialColorModeName` value should be a unique name' +\n          ' and cannot reference a key in `theme.colors.modes`.'\n      )\n    }\n  }\n\n  return [mode, setMode]\n}\n\nexport const useColorMode = () => {\n  const { colorMode, setColorMode } = useThemeUI()\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`)\n  }\n\n  return [colorMode, setColorMode]\n}\n\nconst applyColorMode = (theme, mode) => {\n  if (!mode) return theme\n  const modes = get(theme, 'colors.modes', {})\n  return merge.all({}, theme, {\n    colors: get(modes, mode, {}),\n  })\n}\n\nconst BodyStyles = () =>\n  jsx(Global, {\n    styles: theme => createColorStyles(theme),\n  })\n\nexport const ColorModeProvider = ({ children }) => {\n  const outer = useThemeUI()\n  const [colorMode, setColorMode] = useColorModeState(outer.theme)\n  const theme = applyColorMode(outer.theme || {}, colorMode)\n  const emotionTheme = { ...theme }\n\n  if (theme.useCustomProperties !== false) {\n    emotionTheme.colors = toCustomProperties(emotionTheme.colors, 'colors')\n  }\n\n  const context = {\n    ...outer,\n    theme,\n    colorMode,\n    setColorMode,\n  }\n\n  return jsx(\n    EmotionContext.Provider,\n    { value: emotionTheme },\n    jsx(\n      Context.Provider,\n      { value: context },\n      jsx(BodyStyles, { key: 'color-mode' }),\n      children\n    )\n  )\n}\n\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.body.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`\n\nexport const InitializeColorMode = () =>\n  jsx('script', {\n    key: 'theme-ui-no-flash',\n    dangerouslySetInnerHTML: {\n      __html: noflash,\n    },\n  })\n"]},"metadata":{},"sourceType":"module"}