{"ast":null,"code":"import { jsx, ThemeContext } from '@emotion/core';\nimport { css } from '@theme-ui/css';\nimport React from 'react';\nimport deepmerge from 'deepmerge';\nimport { version } from '@emotion/core/package.json';\n\nvar getCSS = function getCSS(props) {\n  if (!props.sx && !props.css) {\n    return undefined;\n  }\n\n  return function (theme) {\n    var styles = css(props.sx)(theme);\n    var raw = typeof props.css === 'function' ? props.css(theme) : props.css;\n    return [styles, raw];\n  };\n};\n\nvar parseProps = function parseProps(props) {\n  if (!props) {\n    return null;\n  }\n\n  var next = {};\n\n  for (var key in props) {\n    if (key === 'sx') {\n      continue;\n    }\n\n    next[key] = props[key];\n  }\n\n  var css$$1 = getCSS(props);\n\n  if (css$$1) {\n    next.css = css$$1;\n  }\n\n  return next;\n};\n\nvar jsx$1 = function jsx$1(type, props) {\n  var children = [],\n      len = arguments.length - 2;\n\n  while (len-- > 0) children[len] = arguments[len + 2];\n\n  return jsx.apply(undefined, [type, parseProps(props)].concat(children));\n};\n\nvar Context = React.createContext({\n  __EMOTION_VERSION__: version,\n  theme: null\n});\n\nvar useThemeUI = function useThemeUI() {\n  return React.useContext(Context);\n};\n\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nvar FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\n\nvar isMergeableObject = function isMergeableObject(n) {\n  return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n};\n\nvar arrayMerge = function arrayMerge(destinationArray, sourceArray, options) {\n  return sourceArray;\n};\n\nvar merge = function merge(a, b) {\n  return deepmerge(a, b, {\n    isMergeableObject: isMergeableObject,\n    arrayMerge: arrayMerge\n  });\n};\n\nmerge.all = function () {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  return deepmerge.all(args, {\n    isMergeableObject: isMergeableObject,\n    arrayMerge: arrayMerge\n  });\n};\n\nvar BaseProvider = function BaseProvider(ref) {\n  var context = ref.context;\n  var children = ref.children;\n  return jsx$1(ThemeContext.Provider, {\n    value: context.theme\n  }, jsx$1(Context.Provider, {\n    value: context,\n    children: children\n  }));\n};\n\nvar ThemeProvider = function ThemeProvider(ref) {\n  var theme = ref.theme;\n  var children = ref.children;\n  var outer = useThemeUI();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== version) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/core installed in your application.');\n    }\n  }\n\n  var context = typeof theme === 'function' ? Object.assign({}, outer, {\n    theme: theme(outer.theme)\n  }) : merge.all({}, outer, {\n    theme: theme\n  });\n  return jsx$1(BaseProvider, {\n    context: context,\n    children: children\n  });\n};\n\nexport { jsx$1 as jsx, Context, useThemeUI, merge, ThemeProvider };","map":{"version":3,"sources":["../src/index.js"],"names":["const","getCSS","props","theme","styles","css","raw","parseProps","next","let","key","jsx","emotion","Context","useThemeUI","React","canUseSymbol","Symbol","REACT_ELEMENT","FORWARD_REF","isMergeableObject","n","arrayMerge","sourceArray","merge","deepmerge","BaseProvider","children","EmotionContext","value","context","ThemeProvider","outer","process","console"],"mappings":"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","sourcesContent":["import {\n  jsx as emotion,\n  ThemeContext as EmotionContext,\n} from '@emotion/core'\nimport { css, get } from '@theme-ui/css'\nimport React from 'react'\nimport deepmerge from 'deepmerge'\nimport { version as __EMOTION_VERSION__ } from '@emotion/core/package.json'\n\nconst getCSS = props => {\n  if (!props.sx && !props.css) return undefined\n  return theme => {\n    const styles = css(props.sx)(theme)\n    const raw = typeof props.css === 'function' ? props.css(theme) : props.css\n    return [styles, raw]\n  }\n}\n\nconst parseProps = props => {\n  if (!props) return null\n  const next = {}\n  for (let key in props) {\n    if (key === 'sx') continue\n    next[key] = props[key]\n  }\n  const css = getCSS(props)\n  if (css) next.css = css\n  return next\n}\n\nexport const jsx = (type, props, ...children) =>\n  emotion.apply(undefined, [type, parseProps(props), ...children])\n\nexport const Context = React.createContext({\n  __EMOTION_VERSION__,\n  theme: null,\n})\n\nexport const useThemeUI = () => React.useContext(Context)\n\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for\n\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7\n\nconst isMergeableObject = n => {\n  return (\n    !!n &&\n    typeof n === 'object' &&\n    n.$$typeof !== REACT_ELEMENT &&\n    n.$$typeof !== FORWARD_REF\n  )\n}\n\nconst arrayMerge = (destinationArray, sourceArray, options) => sourceArray\n\nexport const merge = (a, b) =>\n  deepmerge(a, b, { isMergeableObject, arrayMerge })\n\nmerge.all = (...args) => deepmerge.all(args, { isMergeableObject, arrayMerge })\n\nconst BaseProvider = ({ context, children }) =>\n  jsx(\n    EmotionContext.Provider, { value: context.theme },\n    jsx(Context.Provider, {\n      value: context,\n      children\n    })\n  )\n\nexport const ThemeProvider = ({\n  theme,\n  children\n}) => {\n  const outer = useThemeUI()\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn(\n        'Multiple versions of Emotion detected,',\n        'and theming might not work as expected.',\n        'Please ensure there is only one copy of @emotion/core installed in your application.'\n      )\n    }\n  }\n\n  const context = typeof theme === 'function'\n    ? { ...outer, theme: theme(outer.theme) }\n    : merge.all({}, outer, { theme })\n\n  return jsx(BaseProvider, {\n    context,\n    children\n  })\n}\n"]},"metadata":{},"sourceType":"module"}