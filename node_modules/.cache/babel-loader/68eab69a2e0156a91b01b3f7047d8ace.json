{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bdougie/code/use-shopping-cart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bdougie/code/use-shopping-cart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/bdougie/code/use-shopping-cart/examples/cra/src/components/cart-display.js\";\n\n/**@jsx jsx */\nimport { jsx, Box, Flex, Image, Button, Input } from 'theme-ui';\nimport { useShoppingCart } from 'use-shopping-cart';\n\nconst CartDisplay = () => {\n  const _useShoppingCart = useShoppingCart(),\n        cartDetails = _useShoppingCart.cartDetails,\n        cartCount = _useShoppingCart.cartCount,\n        formattedTotalPrice = _useShoppingCart.formattedTotalPrice,\n        redirectToCheckout = _useShoppingCart.redirectToCheckout,\n        clearCart = _useShoppingCart.clearCart,\n        setItemQuantity = _useShoppingCart.setItemQuantity;\n\n  const handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            _context.next = 3;\n            return fetch('/.netlify/functions/create-session', {\n              method: 'post',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(cartDetails)\n            }).then(res => {\n              return res.json();\n            }).catch(error => console.log(error));\n\n          case 3:\n            response = _context.sent;\n            redirectToCheckout({\n              sessionId: response.sessionId\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (Object.keys(cartDetails).length === 0) {\n    return jsx(Box, {\n      sx: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"Shopping Cart Display Panel\"), jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"No items in cart\"));\n  } else {\n    return jsx(Flex, {\n      sx: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"Shopping Cart Display Panel\"), Object.keys(cartDetails).map(item => {\n      const cartItem = cartDetails[item];\n      const name = cartItem.name,\n            sku = cartItem.sku,\n            quantity = cartItem.quantity;\n      return jsx(Flex, {\n        key: cartItem.sku,\n        sx: {\n          justifyContent: 'space-around',\n          alignItems: 'center',\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, jsx(Flex, {\n        sx: {\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }\n      }, jsx(Image, {\n        sx: {\n          width: 100\n        },\n        src: cartItem.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }), jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, name)), jsx(Input, {\n        type: 'number',\n        max: 99,\n        sx: {\n          width: 60\n        },\n        defaultValue: quantity,\n        onChange: e => {\n          const value = e.target.value;\n          setItemQuantity(sku, value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }\n      }));\n    }), jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Total Items in Cart: \", cartCount), jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Total Price: \", formattedTotalPrice), jsx(Box, {\n      as: 'form',\n      action: '/.netlify/functions/create-session',\n      method: \"POST\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, jsx(Button, {\n      sx: {\n        backgroundColor: 'black'\n      },\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, \"Checkout\")), jsx(Button, {\n      sx: {\n        backgroundColor: 'black'\n      },\n      onClick: () => clearCart(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"Clear Cart Items\"));\n  }\n};\n\nexport default CartDisplay;","map":{"version":3,"sources":["/Users/bdougie/code/use-shopping-cart/examples/cra/src/components/cart-display.js"],"names":["jsx","Box","Flex","Image","Button","Input","useShoppingCart","CartDisplay","cartDetails","cartCount","formattedTotalPrice","redirectToCheckout","clearCart","setItemQuantity","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","catch","error","console","log","response","sessionId","Object","keys","length","textAlign","flexDirection","justifyContent","alignItems","map","item","cartItem","name","sku","quantity","width","image","e","value","target","backgroundColor"],"mappings":"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","sourcesContent":["/**@jsx jsx */\r\nimport { jsx, Box, Flex, Image, Button, Input } from 'theme-ui'\r\nimport { useShoppingCart } from 'use-shopping-cart'\r\n\r\nconst CartDisplay = () => {\r\n  const {\r\n    cartDetails,\r\n    cartCount,\r\n    formattedTotalPrice,\r\n    redirectToCheckout,\r\n    clearCart,\r\n    setItemQuantity\r\n  } = useShoppingCart()\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    const response = await fetch('/.netlify/functions/create-session', {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cartDetails)\r\n    })\r\n      .then((res) => {\r\n        return res.json()\r\n      })\r\n      .catch((error) => console.log(error))\r\n\r\n    redirectToCheckout({ sessionId: response.sessionId })\r\n  }\r\n\r\n  if (Object.keys(cartDetails).length === 0) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center' }}>\r\n        <h2>Shopping Cart Display Panel</h2>\r\n        <h3>No items in cart</h3>\r\n      </Box>\r\n    )\r\n  } else {\r\n    return (\r\n      <Flex\r\n        sx={{\r\n          flexDirection: 'column',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <h2>Shopping Cart Display Panel</h2>\r\n        {Object.keys(cartDetails).map((item) => {\r\n          const cartItem = cartDetails[item]\r\n          const { name, sku, quantity } = cartItem\r\n          return (\r\n            <Flex\r\n              key={cartItem.sku}\r\n              sx={{\r\n                justifyContent: 'space-around',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n              }}\r\n            >\r\n              <Flex sx={{ flexDirection: 'column', alignItems: 'center' }}>\r\n                <Image sx={{ width: 100 }} src={cartItem.image} />\r\n                <p>{name}</p>\r\n              </Flex>\r\n              <Input\r\n                type={'number'}\r\n                max={99}\r\n                sx={{ width: 60 }}\r\n                defaultValue={quantity}\r\n                onChange={(e) => {\r\n                  const { value } = e.target\r\n                  setItemQuantity(sku, value)\r\n                }}\r\n              />\r\n            </Flex>\r\n          )\r\n        })}\r\n        <h3>Total Items in Cart: {cartCount}</h3>\r\n        <h3>Total Price: {formattedTotalPrice}</h3>\r\n        <Box\r\n          as={'form'}\r\n          action={'/.netlify/functions/create-session'}\r\n          method=\"POST\"\r\n        >\r\n          <Button sx={{ backgroundColor: 'black' }} onClick={handleSubmit}>\r\n            Checkout\r\n          </Button>\r\n        </Box>\r\n        <Button sx={{ backgroundColor: 'black' }} onClick={() => clearCart()}>\r\n          Clear Cart Items\r\n        </Button>\r\n      </Flex>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CartDisplay\r\n"]},"metadata":{},"sourceType":"module"}